/**
 */
package hTMLFormular.provider;

import hTMLFormular.util.HTMLFormularAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class HTMLFormularItemProviderAdapterFactory extends HTMLFormularAdapterFactory
		implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public HTMLFormularItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link hTMLFormular.Formular} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FormularItemProvider formularItemProvider;

	/**
	 * This creates an adapter for a {@link hTMLFormular.Formular}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFormularAdapter() {
		if (formularItemProvider == null) {
			formularItemProvider = new FormularItemProvider(this);
		}

		return formularItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link hTMLFormular.Eingabe} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EingabeItemProvider eingabeItemProvider;

	/**
	 * This creates an adapter for a {@link hTMLFormular.Eingabe}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEingabeAdapter() {
		if (eingabeItemProvider == null) {
			eingabeItemProvider = new EingabeItemProvider(this);
		}

		return eingabeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link hTMLFormular.Texteingabe} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TexteingabeItemProvider texteingabeItemProvider;

	/**
	 * This creates an adapter for a {@link hTMLFormular.Texteingabe}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTexteingabeAdapter() {
		if (texteingabeItemProvider == null) {
			texteingabeItemProvider = new TexteingabeItemProvider(this);
		}

		return texteingabeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link hTMLFormular.Auswahlliste} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AuswahllisteItemProvider auswahllisteItemProvider;

	/**
	 * This creates an adapter for a {@link hTMLFormular.Auswahlliste}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAuswahllisteAdapter() {
		if (auswahllisteItemProvider == null) {
			auswahllisteItemProvider = new AuswahllisteItemProvider(this);
		}

		return auswahllisteItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link hTMLFormular.Textbereich} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TextbereichItemProvider textbereichItemProvider;

	/**
	 * This creates an adapter for a {@link hTMLFormular.Textbereich}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTextbereichAdapter() {
		if (textbereichItemProvider == null) {
			textbereichItemProvider = new TextbereichItemProvider(this);
		}

		return textbereichItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link hTMLFormular.Auswahl} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AuswahlItemProvider auswahlItemProvider;

	/**
	 * This creates an adapter for a {@link hTMLFormular.Auswahl}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAuswahlAdapter() {
		if (auswahlItemProvider == null) {
			auswahlItemProvider = new AuswahlItemProvider(this);
		}

		return auswahlItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link hTMLFormular.Ueberschrift} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UeberschriftItemProvider ueberschriftItemProvider;

	/**
	 * This creates an adapter for a {@link hTMLFormular.Ueberschrift}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUeberschriftAdapter() {
		if (ueberschriftItemProvider == null) {
			ueberschriftItemProvider = new UeberschriftItemProvider(this);
		}

		return ueberschriftItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link hTMLFormular.Listenelement} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ListenelementItemProvider listenelementItemProvider;

	/**
	 * This creates an adapter for a {@link hTMLFormular.Listenelement}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createListenelementAdapter() {
		if (listenelementItemProvider == null) {
			listenelementItemProvider = new ListenelementItemProvider(this);
		}

		return listenelementItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link hTMLFormular.Button} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ButtonItemProvider buttonItemProvider;

	/**
	 * This creates an adapter for a {@link hTMLFormular.Button}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createButtonAdapter() {
		if (buttonItemProvider == null) {
			buttonItemProvider = new ButtonItemProvider(this);
		}

		return buttonItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>) type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (formularItemProvider != null)
			formularItemProvider.dispose();
		if (eingabeItemProvider != null)
			eingabeItemProvider.dispose();
		if (texteingabeItemProvider != null)
			texteingabeItemProvider.dispose();
		if (auswahllisteItemProvider != null)
			auswahllisteItemProvider.dispose();
		if (textbereichItemProvider != null)
			textbereichItemProvider.dispose();
		if (auswahlItemProvider != null)
			auswahlItemProvider.dispose();
		if (ueberschriftItemProvider != null)
			ueberschriftItemProvider.dispose();
		if (listenelementItemProvider != null)
			listenelementItemProvider.dispose();
		if (buttonItemProvider != null)
			buttonItemProvider.dispose();
	}

}
